/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.56
 * Generated at: 2022-01-04 08:01:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Ex0104_005f4_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");

	/* Ex0104_3에서 post방식으로 받아온 내용 처리  */ 
	request.setCharacterEncoding("utf-8");// 인코딩 방식 설정 (선두열 작성) 한글 문자열 해독
	String sname = request.getParameter("sname"); //전송 문자열 저장용
	String sage = request.getParameter("sage"); //숫자로 넘긴다고 해도 문자열로 저장
	String sarea = request.getParameter("sarea");
	String syear = request.getParameter("syear");
	String shobby = request.getParameter("shobby");
	String spwd = request.getParameter("spwd");
	
	/* Wrapper 클라스를 통해 정수로 parsing */
	/* 예외가 발생할 확률이 높은 코드 - 예외처리 */
	int iage = 0; // 전역변수 선언
	boolean flag = true; //나이가 정상으로 넘어온다고 가정 
	if(sname.trim().length () < 2) { //문자열이 왼쪽과 오른쪽에 공백이 있을시 잘라버리는 메서드
		flag = false;  				// 한글이던 영어이던 모양자체로 한글자로 인식. 바이트로 인식하지 않음
									// 한글자 이면 alert 뜸	
									// 이건 예외처리가 아니라 그냥 if 구문으로 처리 
	}							
	try { //예외가 발생할수 있는 부분
		// int iage = Integer.parseInt(sage); 정수 형태의 문자열을 정수로 형변환
		// 이렇게 안에서 iage 변수를 써버리면 bracket밖에서 iage자체를 쓸수 없게 된다.
		// 따라서 밖에서 변수 선언하고 여기서는 값만 주기
		iage = Integer.parseInt(sage);
		
	} catch (Exception e) { //예외가 발생했을경우 처리할 부분
		//iage = 25;
		flag = false;
	} 
	if(flag == false) { // 예외가 발생했을경우
		

      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		<script>\r\n");
      out.write("			alert(\"입력오류발생.\");\r\n");
      out.write("			history.back(); //직전페이지로 이동 \r\n");
      out.write("		</script>\r\n");
      out.write("		\r\n");
 
	
	} else { // 정상일 경우
		/* 잘 넘어왔는지 확인용 출력 */
		out.print(sname + "<br>");
		out.print(sage + "<br>");
		out.print(sarea + "<br>");
		out.print(syear + "<br>");
		out.print(shobby + "<br>");
		out.print(spwd + "<br>");
		out.print(iage + "<br>");
	}
	//사용자에 의한 runtime 에러들,버그들, 예외를 배려하는 프로그램을 만들어야한다. 
	

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
